// commands/handlers/enhancedCommandHandler.js
import bot from "../../config/bot.js";
import database from "../../utils/database.js";
import requestQueue from "../../utils/requestQueue.js";
import healthMonitor from "../../utils/healthMonitor.js";
import { getMainKeyboard } from "../constants/keyboards.js";

// Request handlers mapping
const requestHandlers = {
  start: handleStartRequest,
  subscribe: handleSubscribeRequest,
  unsubscribe: handleUnsubscribeRequest,
  status: handleStatusRequest,
  help: handleHelpRequest,
  health: handleHealthRequest,
  queue: handleQueueRequest
};

// Enhanced command handler with queue management
export const handleCommand = async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  const username = msg.from.username || 'unknown';

  try {
    // Extract command from text
    const command = text.replace('/', '').toLowerCase();
    
    // Check if command is supported
    if (!requestHandlers[command]) {
      await bot.sendMessage(chatId, "‚ùå Unknown command. Use /help for available commands.");
      return;
    }

    // Add request to queue
    const requestId = await requestQueue.addRequest({
      userId: userId,
      type: command,
      data: { chatId, username, text },
      priority: getCommandPriority(command)
    });

    console.log(`üì• Command queued: ${command} from user ${username} (${userId}) - Request ID: ${requestId}`);

    // Send acknowledgment
    await bot.sendMessage(chatId, `‚è≥ Your request is being processed... (Queue position: ${requestQueue.getStatus().queuedRequests + 1})`);

  } catch (error) {
    console.error("‚ùå Error handling command:", error);
    
    if (error.message.includes('Rate limit')) {
      await bot.sendMessage(chatId, "‚ö†Ô∏è You're making requests too quickly. Please wait a moment before trying again.");
    } else if (error.message.includes('Server is busy')) {
      await bot.sendMessage(chatId, "‚ö†Ô∏è The server is currently busy. Please try again in a few moments.");
    } else {
      await bot.sendMessage(chatId, "‚ùå An error occurred while processing your request. Please try again.");
    }
  }
};

// Get command priority (higher number = higher priority)
function getCommandPriority(command) {
  const priorities = {
    start: 5,
    help: 5,
    status: 3,
    subscribe: 4,
    unsubscribe: 4,
    health: 2,
    queue: 1
  };
  
  return priorities[command] || 1;
}

// Request handler functions
async function handleStartRequest(data) {
  const { chatId, username } = data;
  const keyboard = await getMainKeyboard(chatId);
  
  const message = `üëã Welcome to Doma Event Notifications!

üì¢ **Doma Domain Event Tracker** - Your gateway to real-time domain event notifications.

**What I can do:**
‚Ä¢ üîî Send real-time domain event notifications
‚Ä¢ üìä Track domain activities across the network
‚Ä¢ ‚ö†Ô∏è Alert you about important domain events
‚Ä¢ üîó Monitor domain transfers and renewals

**Events I Track:**
‚Ä¢ ‚ú® New domain minting
‚Ä¢ üîÑ Domain renewals
‚Ä¢ üî• Domain burning
‚Ä¢ üîí Domain locking/unlocking
‚Ä¢ üè¢ Registrar changes
‚Ä¢ üìù Metadata updates

**Commands:**
‚Ä¢ /subscribe - Get domain event alerts
‚Ä¢ /unsubscribe - Stop receiving alerts
‚Ä¢ /status - Check subscription status
‚Ä¢ /health - Check system health
‚Ä¢ /help - Show this help message

**System Features:**
‚Ä¢ üöÄ Auto-restart on crashes
‚Ä¢ üìä Request queue management
‚Ä¢ üè• Health monitoring
‚Ä¢ ‚ö° Rate limiting protection`;

  try {
    await bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
  } catch (error) {
    console.error("‚ùå Error sending start message:", error);
    await bot.sendMessage(chatId, message.replace(/\*\*/g, ''), {
      reply_markup: keyboard
    });
  }
}

async function handleSubscribeRequest(data) {
  const { chatId, username } = data;
  
  try {
    await database.addSubscriber(chatId);
    await bot.sendMessage(chatId, `‚úÖ You are now subscribed to Doma event notifications, ${username}!`);
  } catch (error) {
    console.error("‚ùå Error subscribing:", error);
    await bot.sendMessage(chatId, "‚ö†Ô∏è Something went wrong. Please try again.");
  }
}

async function handleUnsubscribeRequest(data) {
  const { chatId, username } = data;
  
  try {
    await database.removeSubscriber(chatId);
    await bot.sendMessage(chatId, `üö´ You have unsubscribed from Doma event notifications, ${username}.`);
  } catch (error) {
    console.error("‚ùå Error unsubscribing:", error);
    await bot.sendMessage(chatId, "‚ö†Ô∏è Something went wrong. Please try again.");
  }
}

async function handleStatusRequest(data) {
  const { chatId, username } = data;
  
  try {
    const subscribers = await database.getSubscribers();
    const isSubscribed = subscribers.includes(chatId);
    const queueStatus = requestQueue.getStatus();
    
    await bot.sendMessage(chatId,
      `üìä **Subscription Status**\n\n` +
      `üë§ User: ${username}\n` +
      `Status: ${isSubscribed ? '‚úÖ Subscribed' : '‚ùå Not Subscribed'}\n` +
      `Total Subscribers: ${subscribers.length}\n\n` +
      `**System Status:**\n` +
      `üîÑ Queue Size: ${queueStatus.queueSize}\n` +
      `‚ö° Active Requests: ${queueStatus.activeRequests}\n` +
      `üè• System Health: ${healthMonitor.getHealthStatus().isHealthy ? '‚úÖ Healthy' : '‚ö†Ô∏è Issues'}\n\n` +
      `${isSubscribed ? 'You will receive domain event notifications!' : 'Use /subscribe to start receiving alerts!'}`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("‚ùå Error getting status:", error);
    await bot.sendMessage(chatId, "‚ö†Ô∏è Unable to get status. Please try again.");
  }
}

async function handleHelpRequest(data) {
  const { chatId, username } = data;
  
  const helpMessage = `üìö **Help & Commands**\n\n` +
    `‚Ä¢ /start - Show main menu\n` +
    `‚Ä¢ /subscribe - Get domain event alerts\n` +
    `‚Ä¢ /unsubscribe - Stop event alerts\n` +
    `‚Ä¢ /status - Check subscription status\n` +
    `‚Ä¢ /health - Check system health\n` +
    `‚Ä¢ /queue - Check request queue status\n` +
    `‚Ä¢ /help - Show this help message\n\n` +
    `**System Features:**\n` +
    `‚Ä¢ üöÄ Auto-restart on crashes\n` +
    `‚Ä¢ üìä Request queue management\n` +
    `‚Ä¢ üè• Health monitoring\n` +
    `‚Ä¢ ‚ö° Rate limiting protection\n\n` +
    `The bot monitors all domain events on the Doma network!`;

  try {
    await bot.sendMessage(chatId, helpMessage, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå Error sending help message:", error);
    await bot.sendMessage(chatId, helpMessage.replace(/\*\*/g, ''));
  }
}

async function handleHealthRequest(data) {
  const { chatId, username } = data;
  
  try {
    const healthStatus = healthMonitor.getHealthStatus();
    const systemInfo = healthMonitor.getSystemInfo();
    
    const healthMessage = `üè• **System Health Report**\n\n` +
      `**Overall Status:** ${healthStatus.isHealthy ? '‚úÖ Healthy' : '‚ö†Ô∏è Issues'}\n` +
      `**Uptime:** ${Math.round(healthStatus.uptime / 1000 / 60)} minutes\n` +
      `**Last Check:** ${new Date(healthStatus.lastHealthCheck?.timestamp).toLocaleString()}\n\n` +
      `**Component Status:**\n` +
      `‚Ä¢ Database: ${healthStatus.database ? '‚úÖ' : '‚ùå'}\n` +
      `‚Ä¢ Telegram: ${healthStatus.telegram ? '‚úÖ' : '‚ùå'}\n` +
      `‚Ä¢ Blockchain: ${healthStatus.blockchain ? '‚úÖ' : '‚ùå'}\n` +
      `‚Ä¢ Memory: ${healthStatus.memory ? '‚úÖ' : '‚ùå'}\n\n` +
      `**System Info:**\n` +
      `‚Ä¢ Memory Usage: ${systemInfo.memory.heapUsed}MB\n` +
      `‚Ä¢ Node Version: ${systemInfo.nodeVersion}\n` +
      `‚Ä¢ Platform: ${systemInfo.platform}`;

    await bot.sendMessage(chatId, healthMessage, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå Error getting health status:", error);
    await bot.sendMessage(chatId, "‚ö†Ô∏è Unable to get health status. Please try again.");
  }
}

async function handleQueueRequest(data) {
  const { chatId, username } = data;
  
  try {
    const queueStatus = requestQueue.getStatus();
    const userRequests = requestQueue.getUserRequests(data.userId);
    
    const queueMessage = `üìä **Request Queue Status**\n\n` +
      `**Queue Overview:**\n` +
      `‚Ä¢ Total in Queue: ${queueStatus.queueSize}\n` +
      `‚Ä¢ Active Requests: ${queueStatus.activeRequests}\n` +
      `‚Ä¢ Queued Requests: ${queueStatus.queuedRequests}\n` +
      `‚Ä¢ Max Concurrent: ${queueStatus.maxConcurrent}\n\n` +
      `**Your Requests:**\n` +
      `‚Ä¢ Recent Requests: ${userRequests.length}\n` +
      `‚Ä¢ Rate Limit: ${queueStatus.rateLimitMax} per ${queueStatus.rateLimitWindow / 1000}s\n\n` +
      `**System Status:**\n` +
      `‚Ä¢ Processing: ${queueStatus.processing ? '‚úÖ Active' : '‚ùå Stopped'}\n` +
      `‚Ä¢ Max Queue Size: ${queueStatus.maxQueueSize}`;

    await bot.sendMessage(chatId, queueMessage, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå Error getting queue status:", error);
    await bot.sendMessage(chatId, "‚ö†Ô∏è Unable to get queue status. Please try again.");
  }
}

// Set up request queue event listeners
requestQueue.on('requestProcessing', (request) => {
  console.log(`üîÑ Processing request: ${request.type} from user ${request.userId}`);
});

requestQueue.on('requestCompleted', (request) => {
  console.log(`‚úÖ Request completed: ${request.type} from user ${request.userId} (${request.duration}ms)`);
});

requestQueue.on('requestError', (request, error) => {
  console.error(`‚ùå Request error: ${request.type} from user ${request.userId} - ${error.message}`);
});

requestQueue.on('requestTimeout', (request) => {
  console.log(`‚è∞ Request timeout: ${request.type} from user ${request.userId}`);
});

export { requestHandlers };
